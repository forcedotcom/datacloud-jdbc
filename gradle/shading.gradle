/**
 * Shared DataCloud Shading Configuration
 * 
 * This script provides centralized shading configuration that can be applied
 * to both JDBC and Spark modules, eliminating duplication.
 */

def SHADE_BASE = "com.salesforce.datacloud.shaded"

/**
 * Shared relocations used by both JDBC and Spark modules
 */
ext.applySharedRelocations = { shadowJar ->
    shadowJar.relocate("com.google", "${SHADE_BASE}.com.google")
    shadowJar.relocate("io.grpc", "${SHADE_BASE}.io.grpc")
    shadowJar.relocate("com.fasterxml.jackson", "${SHADE_BASE}.com.fasterxml.jackson")
    shadowJar.relocate("dev.failsafe", "${SHADE_BASE}.dev.failsafe")
    shadowJar.relocate("io.jsonwebtoken", "${SHADE_BASE}.io.jsonwebtoken")
    shadowJar.relocate("io.netty", "${SHADE_BASE}.io.netty")
    shadowJar.relocate("kotlin", "${SHADE_BASE}.kotlin")
    shadowJar.relocate("okhttp3", "${SHADE_BASE}.okhttp3")
    shadowJar.relocate("okio", "${SHADE_BASE}.okio")
    shadowJar.relocate("org.apache.arrow", "${SHADE_BASE}.org.apache.arrow")
}

/**
 * Shared exclusions used by both JDBC and Spark modules
 */
ext.applySharedExclusions = { shadowJar ->
    shadowJar.exclude("META-INF/maven/**")
    shadowJar.exclude("**/*.proto")
}

/**
 * JDBC-specific shading configuration
 */
ext.applyJdbcShading = { shadowJar ->
    shadowJar.duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.EXCLUDE
    // ZIP64 disabled for standard JAR size
    
    applySharedRelocations(shadowJar)
    
    // JDBC-specific relocations
    shadowJar.relocate("org.apache.calcite", "${SHADE_BASE}.org.apache.calcite") {
        exclude("org.apache.calcite.avatica.remote.Driver")
    }
    shadowJar.relocate("org.apache.commons", "${SHADE_BASE}.org.apache.commons")
    shadowJar.relocate("org.apache.hc", "${SHADE_BASE}.org.apache.hc")
    
    // JDBC-specific service files
    shadowJar.mergeServiceFiles {
        exclude("META-INF/services/java.sql.Driver")
    }
    
    applySharedExclusions(shadowJar)
    
    // JDBC-specific exclusions
    shadowJar.exclude("org.slf4j")
    shadowJar.exclude("org.apache.calcite.avatica.remote.Driver")
    shadowJar.exclude("META-INF/LICENSE*")
    shadowJar.exclude("META-INF/NOTICE*")
    shadowJar.exclude("META-INF/DEPENDENCIES")
    shadowJar.exclude("META-INF/services/com.fasterxml.*")
    shadowJar.exclude("META-INF/*.xml")
    shadowJar.exclude("META-INF/*.SF")
    shadowJar.exclude("META-INF/*.DSA")
    shadowJar.exclude("META-INF/*.RSA")
    shadowJar.exclude(".netbeans_automatic_build")
    shadowJar.exclude("git.properties")
    shadowJar.exclude("google-http-client.properties")
    shadowJar.exclude("storage.v1.json")
    shadowJar.exclude("pipes-fork-server-default-log4j2.xml")
    shadowJar.exclude("dependencies.properties")
    shadowJar.exclude("arrow-git.properties")
}

/**
 * Spark-specific shading configuration
 */
ext.applySparkShading = { shadowJar ->
    shadowJar.duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.EXCLUDE
    shadowJar.zip64 = true  // Enable ZIP64 for large Spark archives
    
    applySharedRelocations(shadowJar)
    
    // Spark-specific relocations (MUST match original exactly)
    shadowJar.relocate("org.apache.calcite", "${SHADE_BASE}.org.apache.calcite") {
        exclude("org.apache.calcite.avatica.remote.Driver")
    }
    shadowJar.relocate("org.apache.commons", "${SHADE_BASE}.org.apache.commons")
    shadowJar.relocate("org.apache.hc", "${SHADE_BASE}.org.apache.hc")
    
    // Spark-specific service files (MUST match original exactly)
    shadowJar.mergeServiceFiles {
        exclude("META-INF/services/java.sql.Driver")
    }
    
    applySharedExclusions(shadowJar)
    
    // Spark-specific exclusions (MUST match original exactly)
    shadowJar.exclude("org.slf4j")
    shadowJar.exclude("org.apache.calcite.avatica.remote.Driver")
    shadowJar.exclude("META-INF/LICENSE*")
    shadowJar.exclude("META-INF/NOTICE*")
    shadowJar.exclude("META-INF/DEPENDENCIES")
    shadowJar.exclude("META-INF/services/com.fasterxml.*")
    shadowJar.exclude("META-INF/*.xml")
    shadowJar.exclude("META-INF/*.DSA")
    shadowJar.exclude("META-INF/*.RSA")
    shadowJar.exclude(".netbeans_automatic_build")
    shadowJar.exclude("git.properties")
    shadowJar.exclude("google-http-client.properties")
    shadowJar.exclude("storage.v1.json")
    shadowJar.exclude("pipes-fork-server-default-log4j2.xml")
    shadowJar.exclude("dependencies.properties")
    shadowJar.exclude("arrow-git.properties")
    
    // Spark runtime exclusions - user provides these at runtime (MUST match original exactly)
    shadowJar.exclude("org/apache/spark/**")
    shadowJar.exclude("scala/**")
    shadowJar.exclude("org/scala-lang/**")
}
